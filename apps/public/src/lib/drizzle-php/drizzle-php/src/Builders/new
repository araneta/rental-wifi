
class QueryBuilder
{
    private string $table;
    private string $schemaClass;
    private array $columns = ['*'];
    private array $joins = [];
    private array $joinSchemas = [];
    private array $wheres = [];
    private array $orders = [];
    private ?int $limitCount = null;
    private ?int $offsetCount = null;

    public function __construct(string $table, string $schemaClass)
    {
        $this->table = $table;
        $this->schemaClass = $schemaClass;
    }

    public function select(array $columns = ['*']): self
    {
        $this->columns = $columns;
        return $this;
    }

    public function join(string $joinTable, string $joinSchemaClass, string $leftColumn, string $operator, string $rightColumn, string $type = 'INNER'): self
    {
        $this->joins[] = strtoupper($type) . " JOIN {$joinTable} ON {$leftColumn} {$operator} {$rightColumn}";
        $this->joinSchemas[$joinTable] = $joinSchemaClass;
        return $this;
    }

    public function leftJoin(string $table, string $schemaClass, string $leftColumn, string $operator, string $rightColumn): self
    {
        return $this->join($table, $schemaClass, $leftColumn, $operator, $rightColumn, 'LEFT');
    }

    public function where(string $condition): self
    {
        $this->wheres[] = $condition;
        return $this;
    }

    public function orderBy(string $column, string $direction = 'ASC'): self
    {
        $this->orders[] = "$column $direction";
        return $this;
    }

    public function limit(int $count): self
    {
        $this->limitCount = $count;
        return $this;
    }

    public function offset(int $count): self
    {
        $this->offsetCount = $count;
        return $this;
    }

    private function validateColumn(string $column): void
    {
        // Allow aliases, functions, wildcards
        if (
            str_contains($column, ' AS ') ||
            str_contains($column, '(') ||
            str_contains($column, ')') ||
            str_ends_with($column, '.*') ||
            $column === '*'
        ) {
            return;
        }

        // If qualified with table
        if (str_contains($column, '.')) {
            [$table, $col] = explode('.', $column, 2);
            $col = trim(explode(' AS ', $col)[0]);

            $schemaClass = $this->joinSchemas[$table] ?? ($table === $this->table ? $this->schemaClass : null);
            if (!$schemaClass) {
                throw new InvalidColumnException("Table '{$table}' is not registered.");
            }

            $columns = $schemaClass::getColumns();
            if (!isset($columns[$col])) {
                throw new InvalidColumnException("Column '{$column}' does not exist in schema.");
            }
            return;
        }

        // If no joins, check main schema
        if (empty($this->joins)) {
            $columns = $this->schemaClass::getColumns();
            if (!isset($columns[$column])) {
                throw new InvalidColumnException("Column '{$column}' does not exist in schema.");
            }
            return;
        }

        throw new InvalidColumnException("Column '{$column}' must be prefixed with a table name.");
    }

    public function buildSelectQuery(): string
    {
        foreach ($this->columns as $column) {
            $this->validateColumn($column);
        }

        $columns = implode(', ', $this->columns);
        $sql = "SELECT {$columns} FROM {$this->table}";

        if (!empty($this->joins)) {
            $sql .= ' ' . implode(' ', $this->joins);
        }

        if (!empty($this->wheres)) {
            $sql .= ' WHERE ' . implode(' AND ', $this->wheres);
        }

        if (!empty($this->orders)) {
            $sql .= ' ORDER BY ' . implode(', ', $this->orders);
        }

        if ($this->limitCount !== null) {
            $sql .= " LIMIT {$this->limitCount}";
        }

        if ($this->offsetCount !== null) {
            $sql .= " OFFSET {$this->offsetCount}";
        }

        return $sql;
    }

    public function get(): string
    {
        return $this->buildSelectQuery();
    }
}
